[core]
	editor = \"$LOCALAPPDATA\\Programs\\Microsoft VS Code\\bin\\code\" --wait
[user]
	email = shauntanzongzhi@gmail.com
	name = EvitanRelta
[alias]
    cum = "!cd "${GIT_PREFIX:-.}"; f() { git add -A; git commit \"$@\"; }; f"
    cumane = "!cd "${GIT_PREFIX:-.}"; f() { git add -A; git commit --amend --no-edit; }; f"
    cane = commit --amend --no-edit
    st = status
    pop = stash pop
    rebun = "!cd "${GIT_PREFIX:-.}"; f() { GIT_SEQUENCE_EDITOR=\"perl -0777 -i -pe 's/^pick/$1/'\" git rebase -i \"$2\"~; }; f"
    git = "!cd "${GIT_PREFIX:-.}"; f() { git \"$@\"; }; f"
    current-branch = rev-parse --abbrev-ref HEAD
    branch-exists = "!cd "${GIT_PREFIX:-.}"; f() { git show-ref --quiet \"refs/heads/$1\"; }; f"
    is-ancestor = merge-base --is-ancestor

    undoc = "!cd "${GIT_PREFIX:-.}"; f() {           \
        if [ $# -eq 0 ]; then                       \
            git reset --soft HEAD~;                 \
        elif [ $# -eq 1 ] && [ $1 == "-f" ]; then   \
            git reset --hard HEAD~;                 \
        else                                        \
            echo Invalid parameters;                \
        fi;                                         \
    }; f"

    dump = "!cd "${GIT_PREFIX:-.}"; f() {           \
        if [ $# -eq 0 ]; then                       \
            git restore :/;                         \
            git clean -df :/;                       \
        elif [ $# -eq 1 ] && [ $1 == "-f" ]; then   \
            git reset --quiet;                      \
            git restore :/;                         \
            git clean -df :/;                       \
        else                                        \
            echo Invalid parameters;                \
        fi;                                         \
    }; f"
    
    link = "!cd "${GIT_PREFIX:-.}"; f() {           \
        if [ $# -eq 1 ] && [ $1 != "-f" ]; then     \
            git remote add origin \"$1\";           \
            git remote set-url origin \"$1\";       \
            git push -u origin master;              \
        elif [ $# -eq 2 ] && [ $1 == "-f" ]; then   \
            git remote add origin \"$2\";           \
            git remote set-url origin \"$2\";       \
            git push -uf origin master;             \
        else                                        \
            echo Invalid parameters;                \
        fi;                                         \
    }; f"
    
    clone-nonempty = "!cd "${GIT_PREFIX:-.}"; f() { \
        if [ $# -eq 2 ] && [ $1 != "-f" ]; then     \
            mkdir -p \"$2\";                        \
            cd \"$2\";                              \
            git init;                               \
            git remote add origin \"$1\";           \
            git fetch;                              \
            git checkout -t origin/master;          \
        elif [ $# -eq 3 ] && [ $1 == "-f" ]; then   \
            mkdir -p \"$3\";                        \
            cd \"$3\";                              \
            rm -drf .git;                           \
            git init;                               \
            git remote add origin \"$2\";           \
            git fetch;                              \
            git checkout -tf origin/master;         \
        else                                        \
            echo Invalid parameters;                \
        fi;                                         \
    }; f"
    
    stash-unstaged = "!cd "${GIT_PREFIX:-.}"; f() { \
        git commit --quiet -m \"TEMP (staged changes)\";    \
        git stash -u \"$@\";                        \
        git undoc;                                  \
    }; f"
    
    stash-staged = "!cd "${GIT_PREFIX:-.}"; f() {   \
        git stash-unstaged --quiet;                 \
        git stash -u \"$@\";                        \
        git stash pop --quiet \"stash@{1}\";        \
    }; f"

    pull-all = "!cd "${GIT_PREFIX:-.}"; f() {                           \
        if [ -n \"$(git status --porcelain)\" ]; then                   \
            echo \"error: There are local changes.\";                   \
            echo \"Aborting...\";                                       \
        elif [ $# -eq 0 ]; then                                         \
            git fetch -p;                                               \
            echo \"From $(git remote get-url origin)\";                 \
            for remote in `git branch -r | grep -v \" -> \" | grep \"origin/\"`; do \
                branch=${remote#origin/};                               \
                git fetch --update-head-ok origin $branch:$branch 2>&1  \
                    | grep -v \"From\";                                 \
                git branch-exists $branch                               \
                    || git branch --quiet -u $remote $branch;           \
            done;                                                       \
        elif [ $# -gt 1 ] && [ $1 == "-s" ]; then                       \
            git fetch -p;                                               \
            echo \"From $(git remote get-url origin)\";                 \
            for remote in `git branch -r | grep -v \" -> \" | grep \"origin/\"`; do \
                branch=${remote#origin/};                               \
                for ignore_branch in \"$@\"; do                         \
                    if [ \"$branch\" == \"$ignore_branch\" ]; then      \
                        echo \"Skipped \\\"$branch\\\"\";               \
                        continue 2;                                     \
                    fi;                                                 \
                done;                                                   \
                git fetch --update-head-ok origin $branch:$branch 2>&1  \
                    | grep -v \"From\";                                 \
                git branch-exists $branch                               \
                    || git branch --quiet -u $remote $branch;           \
            done;                                                       \
        else                                                            \
            echo Invalid parameters;                                    \
        fi;                                                             \
    }; f"
    
    pull-force = "!cd "${GIT_PREFIX:-.}"; f() { \
        git fetch;                              \
        git reset --hard \"origin/$(git branch --show-current)\"; \
    }; f"

    merge-this = "!cd "${GIT_PREFIX:-.}"; f() { \
        branch=$(git current-branch);           \
        git checkout master;                    \
        git merge --no-ff \"$branch\";          \
        git branch -d \"$branch\";              \
    }; f"
    
    branch-d-both = "!cd "${GIT_PREFIX:-.}"; f() {  \
        if [ $# -eq 1 ]; then                       \
            git branch -d \"$1\";                   \
            git push -d origin \"$1\";              \
        else                                        \
            echo Invalid parameters;                \
        fi;                                         \
    }; f"

    get-deleted-branch = "!cd "${GIT_PREFIX:-.}"; f() { \
        if [ $# -eq 1 ]; then                           \
            commit_subject=$(git log --format=%s -n 1 \"$1\");                              \
            branch_name=$(grep -Po \"(?<=')[^']+(?=')\" <<< \"$commit_subject\" | head -1); \
            git checkout -b \"$branch_name\" \"$1^2\";  \
            git checkout -;                         \
        else                                        \
            echo Invalid parameters;                \
        fi;                                         \
    }; f"

    unmerge = "!cd "${GIT_PREFIX:-.}"; f() {    \
        is_merge_commit="$(git rev-parse --verify \"HEAD^2\" 2> /dev/null)"; \
        if [ -n \"$is_merge_commit\" ]; then    \
            git get-deleted-branch HEAD;        \
            git undoc -f;                       \
            git checkout -;                     \
        else                                    \
            echo HEAD is not a merge commit;    \
        fi;                                     \
    }; f"

    con = "!cd "${GIT_PREFIX:-.}"; f() {        \
        continue_command=\"$(git status | grep -oP '(?i)git [a-z0-9-]+ --continue')\";  \
        if [ -n \"$continue_command\" ]; then   \
            eval \"$continue_command\";         \
        else                                    \
            echo No continue command found;     \
        fi;                                     \
    }; f"

    cone = "!cd "${GIT_PREFIX:-.}"; f() {        \
        continue_command_wo_git=\"$(git status | grep -oP '(?i)(?<=git )[a-z0-9-]+ --continue')\";  \
        if [ -n \"$continue_command_wo_git\" ]; then   \
            eval \"git -c core.editor=true $continue_command_wo_git\";         \
        else                                    \
            echo No continue command found;     \
        fi;                                     \
    }; f"

    ab = "!cd "${GIT_PREFIX:-.}"; f() {     \
        abort_command=\"$(git status | grep -oP '(?i)git [a-z0-9-]+ --abort')\";  \
        if [ -n \"$abort_command\" ]; then  \
            eval \"$abort_command\";        \
        else                                \
            echo No abort command found;    \
        fi;                                 \
    }; f"
