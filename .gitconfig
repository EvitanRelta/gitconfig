[core]
	editor = \"$LOCALAPPDATA\\Programs\\Microsoft VS Code\\bin\\code\" --wait
[user]
	email = shauntanzongzhi@gmail.com
	name = EvitanRelta
[alias]
    cum = "!cd "${GIT_PREFIX:-.}"; f() { git add -A; git commit \"$@\"; }; f"
    cumane = "!cd "${GIT_PREFIX:-.}"; f() { git add -A; git commit --amend --no-edit; }; f"
    cane = commit --amend --no-edit
    st = status
    pop = stash pop
    rebun = "!cd "${GIT_PREFIX:-.}"; f() { GIT_SEQUENCE_EDITOR=\"perl -0777 -i -pe 's/^pick/$1/'\" git rebase -i \"$2\"~; }; f"
    git = "!cd "${GIT_PREFIX:-.}"; f() { git \"$@\"; }; f"
    current-branch = rev-parse --abbrev-ref HEAD

    undoc = "!cd "${GIT_PREFIX:-.}"; f() {           \
        if [ $# -eq 0 ]; then                       \
            git reset --soft HEAD~;                 \
        elif [ $# -eq 1 ] && [ $1 == "-f" ]; then   \
            git reset --hard HEAD~;                 \
        else                                        \
            echo Invalid parameters;                \
        fi;                                         \
    }; f"

    dump = "!cd "${GIT_PREFIX:-.}"; f() {           \
        if [ $# -eq 0 ]; then                       \
            git restore :/;                         \
            git clean -df :/;                       \
        elif [ $# -eq 1 ] && [ $1 == "-f" ]; then   \
            git reset --quiet;                      \
            git restore :/;                         \
            git clean -df :/;                       \
        else                                        \
            echo Invalid parameters;                \
        fi;                                         \
    }; f"
    
    link = "!cd "${GIT_PREFIX:-.}"; f() {           \
        if [ $# -eq 1 ] && [ $1 != "-f" ]; then     \
            git remote add origin \"$1\";           \
            git remote set-url origin \"$1\";       \
            git push -u origin master;              \
        elif [ $# -eq 2 ] && [ $1 == "-f" ]; then   \
            git remote add origin \"$2\";           \
            git remote set-url origin \"$2\";       \
            git push -uf origin master;             \
        else                                        \
            echo Invalid parameters;                \
        fi;                                         \
    }; f"
    
    clone-nonempty = "!cd "${GIT_PREFIX:-.}"; f() { \
        if [ $# -eq 2 ] && [ $1 != "-f" ]; then     \
            mkdir -p \"$2\";                        \
            cd \"$2\";                              \
            git init;                               \
            git remote add origin \"$1\";           \
            git fetch;                              \
            git checkout -t origin/master;          \
        elif [ $# -eq 3 ] && [ $1 == "-f" ]; then   \
            mkdir -p \"$3\";                        \
            cd \"$3\";                              \
            rm -drf .git;                           \
            git init;                               \
            git remote add origin \"$2\";           \
            git fetch;                              \
            git checkout -tf origin/master;         \
        else                                        \
            echo Invalid parameters;                \
        fi;                                         \
    }; f"
    
    stash-unstaged = "!cd "${GIT_PREFIX:-.}"; f() { \
        git commit --quiet -m \"TEMP (staged changes)\";    \
        git stash -u \"$@\";                        \
        git undoc;                                  \
    }; f"
    
    stash-staged = "!cd "${GIT_PREFIX:-.}"; f() {   \
        git stash-unstaged --quiet;                 \
        git stash -u \"$@\";                        \
        git stash pop --quiet \"stash@{1}\";        \
    }; f"

    pull-all = "!cd "${GIT_PREFIX:-.}"; f() {                           \
        if [ -n \"$(git status --porcelain)\" ]; then                   \
            echo \"error: There are local changes.\";                   \
            echo \"Aborting...\";                                       \
        elif [ $# -eq 0 ]; then                                         \
            git fetch -p;                                               \
            echo \"From $(git remote get-url origin)\";                 \
            for remote in `git branch -r | grep -v \" -> \"`; do        \
                branch=${remote#origin/};                               \
                branch_not_exists=$(git show-ref refs/heads/$branch);   \
                git fetch --update-head-ok origin $branch:$branch 2>&1  \
                    | grep -v \"From\";                                 \
                [ -z \"$branch_not_exists\" ]                           \
                    && git branch --quiet -u $remote $branch;           \
            done;                                                       \
        elif [ $# -gt 1 ] && [ $1 == "-s" ]; then                       \
            git fetch -p;                                               \
            echo \"From $(git remote get-url origin)\";                 \
            for remote in `git branch -r | grep -v \" -> \"`; do        \
                branch=${remote#origin/};                               \
                for ignore_branch in \"$@\"; do                         \
                    if [ \"$branch\" == \"$ignore_branch\" ]; then      \
                        echo \"Skipped \\\"$branch\\\"\";               \
                        continue 2;                                     \
                    fi;                                                 \
                done;                                                   \
                branch_not_exists=$(git show-ref refs/heads/$branch);   \
                git fetch --update-head-ok origin $branch:$branch 2>&1  \
                    | grep -v \"From\";                                 \
                [ -z \"$branch_not_exists\" ]                           \
                    && git branch --quiet -u $remote $branch;           \
            done;                                                       \
        else                                                            \
            echo Invalid parameters;                                    \
        fi;                                                             \
    }; f"
    
    pull-force = "!cd "${GIT_PREFIX:-.}"; f() {     \
        git fetch --all;                            \
        git reset --hard \"origin/$(git branch --show-current)\"; \
    }; f"